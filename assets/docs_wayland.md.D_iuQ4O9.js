import{_ as a,c as s,o as i,a6 as t}from"./chunks/framework.CuWwSu3D.js";const y=JSON.parse('{"title":"Pot","titleTemplate":"Wayland","description":"","frontmatter":{"title":"Pot","titleTemplate":"Wayland"},"headers":[],"relativePath":"docs/wayland.md","filePath":"docs/wayland.md"}'),e={name:"docs/wayland.md"},n=t(`<h1 id="wayland" tabindex="-1">Wayland <a class="header-anchor" href="#wayland" aria-label="Permalink to &quot;Wayland&quot;">​</a></h1><p>由于各大发行版对于 Wayland 的支持程度不同，所以 pot 本身没法做到特别完美的支持，这里可以提供一些常见问题的解决方案，通过合理的设置之后，pot 也可以在 Wayland 下完美运行。</p><h2 id="快捷键无法使用" tabindex="-1">快捷键无法使用 <a class="header-anchor" href="#快捷键无法使用" aria-label="Permalink to &quot;快捷键无法使用&quot;">​</a></h2><p>由于 Tauri 的快捷键方案并没有支持 Wayland，所以 pot 应用内的快捷键设置在 Wayland 下无法使用。 您可以设置系统快捷用 curl 发送请求来触发 pot，详见<a href="/docs/invoke.html">外部调用</a></p><h2 id="截图无法使用" tabindex="-1">截图无法使用 <a class="header-anchor" href="#截图无法使用" aria-label="Permalink to &quot;截图无法使用&quot;">​</a></h2><p>在一些纯 Wayland 桌面环境/窗口管理器(如 Hyprland)上，pot 内置的截图无法使用，这时可以通过使用其他截图工具代替，详见 <a href="/docs/invoke.html#不使用软件内截图">不使用软件内截图</a></p><p>下面给出在 Hyprland 下的配置示例(通过 grim 和 slurp 实现截图)：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = ALT, X, exec, grim -g </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(slurp)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ~/.cache/com.pot-app.desktop/pot_screenshot_cut.png &amp;&amp; curl </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1:60828/ocr_recognize?screenshot=false&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = ALT, C, exec, grim -g </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(slurp)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ~/.cache/com.pot-app.desktop/pot_screenshot_cut.png &amp;&amp; curl </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1:60828/ocr_translate?screenshot=false&quot;</span></span></code></pre></div><p>其他桌面环境/窗口管理器也是类似的操作</p><h2 id="划词翻译窗口跟随鼠标位置" tabindex="-1">划词翻译窗口跟随鼠标位置 <a class="header-anchor" href="#划词翻译窗口跟随鼠标位置" aria-label="Permalink to &quot;划词翻译窗口跟随鼠标位置&quot;">​</a></h2><p>由于目前 pot 在 Wayland 下还无法获取到正确的鼠标坐标，所以内部的实现无法工作。 对于某些桌面环境/窗口管理器，可以通过设置窗口规则来实现窗口跟随鼠标位置，这里以 Hyprland 为例：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">windowrulev2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = float, class:(pot), title:(Translator|OCR|PopClip|Screenshot Translate) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Translation window floating</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">windowrulev2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = move cursor 0 0, class:(pot), title:(Translator|PopClip|Screenshot Translate) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Translation window follows the mouse position.</span></span></code></pre></div>`,12),l=[n];function p(o,h,r,d,c,k){return i(),s("div",null,l)}const g=a(e,[["render",p]]);export{y as __pageData,g as default};
